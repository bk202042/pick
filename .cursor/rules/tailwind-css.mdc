---
description: Tailwind CSS coding standards
globs: **/*.{css,html,js,ts,jsx,tsx}
alwaysApply: false
---
## Tailwind CSS Coding Rules

These rules are designed for an AI coder working with Tailwind CSS (v2.x or v3.x). The goal is to ensure consistency, maintainability, and best practices in Tailwind CSS projects.

### 1. General Principles

* **Utility-First Approach:** Primarily use Tailwind's utility classes. Avoid writing custom CSS unless absolutely necessary.
* **Configuration is Key:**  Tailwind's configuration file (`tailwind.config.js` or `tailwind.config.ts`) is the central place for customization.  Modify and extend Tailwind through this file.
* **Mobile-First:** Write styles for mobile devices by default. Use responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`, `2xl:`) to apply styles for larger screens.
* **DRY (Don't Repeat Yourself):**  If you find yourself repeating the same set of utility classes, consider creating a custom component or using `@apply` (with caution) in your CSS.
* **Accessibility (a11y):**  Always consider accessibility. Use semantic HTML, provide proper `aria-*` attributes, and ensure good focus states for interactive elements.


### 2. `tailwind.config.js` / `tailwind.config.ts`

* **Theme Customization:**  Extend the default Tailwind theme using the `theme` -> `extend` section of the config file. This includes:
    * **Colors:** Define project-specific colors.
    * **Spacing:**  Define consistent spacing units.
    * **Screens:**  Customize breakpoints if needed.
    * **Font Family:** Define project-specific font families.
    * **Other Theme Values:**  Customize borders, shadows, etc., as required.
* **Plugins:**  Use Tailwind plugins to add additional functionality, such as typography, forms, or aspect ratio utilities.
* **Purge/Content:**  Configure the `purge` or `content` option to remove unused CSS in production.  Use globs that accurately target your project's files (e.g., `*.html`, `*.js`, `*.jsx`, `*.ts`, `*.tsx`, `*.vue`).

```javascript
// Example tailwind.config.js
module.exports = {
  content: [
    './src/**/*.{html,js,jsx,ts,tsx}',
    './public/index.html'
  ],
  theme: {
    extend: {
      colors: {
        'primary': '#1e40af',
        'secondary': '#9333ea',
      },
      spacing: {
        '4.5': '1.125rem',
      },
      fontFamily: {
        'sans': ['Inter', 'sans-serif'],
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
}
```


### 3. HTML/JSX/TSX

* **Class Order:**  Maintain a consistent order for Tailwind classes.  A common approach is:

1. Layout (e.g., `container`, `flex`, `grid`)
2. Positioning (e.g., `relative`, `absolute`)
3. Box Model (e.g., `m-`, `p-`, `w-`, `h-`)
4. Typography (e.g., `text-`, `font-`)
5. Background (e.g., `bg-`)
6. Borders (e.g., `border-`, `rounded-`)
7. Effects (e.g., `shadow-`, `opacity-`)
8. Transitions and Animations (e.g., `transition-`, `animate-`)
9. State (e.g., `hover:`, `focus:`, `active:`)
* **Readability:**  Format your HTML/JSX/TSX to improve readability.  Use line breaks and indentation to separate groups of Tailwind classes.
* **Conditional Classes:** Use libraries like `classnames` or template literals to dynamically apply Tailwind classes based on component state or props.

```jsx
// Example using classnames
import classNames from 'classnames';

function MyComponent({ isActive }) {
  return (
    <div className={classNames(
      'p-4 rounded-md',
      'bg-gray-100',
      {'bg-blue-100': isActive},
      'text-gray-700'
    )}>
      {/* ... */}
    </div>
  );
}
```


### 4. CSS (and `@apply` - Use Sparingly)

* **Custom Styles:**  If you need custom CSS, try to limit it to component-specific styles.
* **`@apply` (Use with Caution):** The `@apply` directive can be used to extract common sets of utility classes into custom CSS classes.  However, overuse can reduce maintainability.  Consider component extraction as an alternative. If you use `@apply`, comment the reason for using.
* **Layer Directives:** Use `@tailwind base`, `@tailwind components`, and `@tailwind utilities` to inject Tailwind's base styles, component styles, and utility classes into your CSS.

```css
/* Example of using @apply (with caution) */
.btn {
  @apply py-2 px-4 font-semibold rounded-md shadow-md;
  /* Use @apply to create a standard button style */
}

.btn-primary {
  @apply bg-blue-500 text-white hover:bg-blue-700;
  /* Primary button style */
}
```


### 5. Responsive Design

* **Mobile-First:** Remember to design for mobile first.
* **Breakpoints:**  Use Tailwind's responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`, `2xl:`) to apply styles at different breakpoints.
* **Consistent Breakpoint Usage:**  Be consistent with the breakpoints you use throughout your project.  Avoid creating custom breakpoints unless absolutely necessary.

Use Container Queries: Prefer @container queries for responsive layouts instead of traditional breakpoints when applicable.

Responsive Utilities: Utilize Tailwind's responsive utility classes to adjust styles based on screen size.

xml
<div class="container mx-auto p-4">
  <h1 class="text-lg sm:text-xl md:text-2xl">Responsive Heading</h1>
</div>

Shadcn UI Integration
Utilize Shadcn Components: Leverage pre-built Shadcn UI components for common UI elements (buttons, forms, etc.) to save time and ensure consistency.

tsx
import { Button } from 'shadcn-ui';

function MyComponent() {
  return (
    <Button variant="primary" className="sm:px-4 md:px-6">
      Click Me
    </Button>
  );
}
Responsive Size Variants: If you need responsive sizing for Shadcn components, use Tailwindâ€™s utility classes in conjunction with component props where applicable.

TypeScript Considerations
Type Safety: Ensure all props passed to components are type-checked using TypeScript interfaces or types to prevent runtime errors.

tsx
interface ButtonProps {
  variant: 'primary' | 'secondary';
}

const MyButton: React.FC<ButtonProps> = ({ variant }) => (
  <Button variant={variant} className="p-2">
    Button Text
  </Button>
);

### 6. Naming Conventions

* **Meaningful Names:**  Use clear and descriptive names for custom CSS classes, components, and configuration values.
* **Prefixes:** Consider using prefixes for custom CSS classes to avoid naming conflicts (e.g., `my-component-`).


### 7. Important Considerations

* **Performance:**  Be mindful of the number of utility classes you use.  Too many classes can impact performance.  Consider component extraction or `@apply` (with caution) to reduce the number of classes.  Ensure your `purge`/`content` configuration is properly set up to remove unused CSS.
* **Consistency:** Strive for consistency in your use of Tailwind classes.  This will make your codebase easier to maintain and understand.
* **Updates:** Keep Tailwind CSS and its plugins up to date to benefit from the latest features and bug fixes.

These rules should help guide the AI coder in producing well-structured, maintainable, and efficient Tailwind CSS code for v2.x/v3.x projects. Remember that these versions rely heavily on the `tailwind.config.js` file for customizations.